{
  "title": "Graph Problems 4-6",
  "cells": [
    {
      "type": "markdown",
      "data": "Q4. \n\na. It is evident that the algorithm `MAYBE-MST-A` returns connected graph, since it maintains the property that $T$ is a connected graph. Furthermore, $T$ is a tree (and thus a spanning tree) since the algorithm removes any cycles: if an edge is in a cycle, then removing it removes that particular cycle, and the result is still connected. The algorithm examines _every_ edge and attempts to remove it, thus removing cycles.\n\nNow, is $T$ minimal? We use the cycle-deletion property above: the edges deleted from the cycles would be the maximum-weight edges in the cycle formed by adding it to $T$. To see this, note that the edges were deleted in non-increasing order. So then any deleted edge would be larger than the other edges that form the cycle.\n\nThus $T$ is an $MST$. To implement this efficiently, we sort the edge weights in $O(E \\lg E)$ time into a linked-list, such that pulling the head is $O(1)$. We could accomplish similar results with a min-heap priority queue. If we maintain $T$ as an adjacency matrix, then computing $T - \\{e\\}$ is $O(1)$ as well. Checking for connectivity requires a (B/D)FS of $O(V+E)$ time; if not all vertices are reached, the graph is not connected. The overall time is thus $O(E \\lg E + E(V+E)) = O(E \\lg V + V^4) = O(V^4)$ since $E \\in O(V^2)$\n\nb. As a simple counter-example, simply take the edges in non-increasing order. You will not necessarily get an MST.\n\nFor implementation, I would once again use an adjacency matrix so that $T \\cup \\{e\\}$ is computable in $O(1)$ time. Then cycle detection is done via a modified DFS in $O(E+V)$ time. Retrieval of edges depends on how \"arbitrary\" is defined/implemented; assuming we don't have to be random, we simply scan the matrix, one row, one column, at a time. This is $O(E) = O(V^2)$ time. The algorithm is thus $O(V^2(E+V)) = O(V^4)$.\n\nc. This third algorithm is almost trivially correct: the invariant that it maintains is precisely the certification of an MST: namely, that $T$ has no cycles, and that the non-tree edges that would form a cycle are the maximal-weight edges.\n\nImplementation & running time is equivalent to (b), with the cycle-detection taking $O(V+E)$ time, adding/removing edges $O(1)$, and finding the maximum edge $O(E)$ (assuming we are given the cycle from our cycle-detection, which we can assert by using a modified certifying-DFS)."
    },
    {
      "type": "latex",
      "language": "latex",
      "data": "Q5. Prove that the 3-SAT instance has a satisfying instance $\\iff$ the constructed graph has a vertex cover of size $\\le n + 2k$.\n\nAs already noted, an $n+2k$-covering is the minimum (a lower bound). We must then show it is an upper (thus tight) bound on the smallest vertex cover $\\iff$ the 3-SAT problem has a solution.\n\nAssume there is a solution to the problem (call this statement $S$). Then we make the \"true\" variables part of our vertex cover (note that if any $x_i$ is false, $\\bar{x_i}$ is true). There are $n$ such vertices. Now we know that all edges between variables and their negations are covered; further, we know that in each triangle, there is at least one vertex whose outgoing edge is covered, since the clause it represents must have at least one variable true. Then we need two more vertices from each triangle to finish the cover. $S \\implies$ The graph has a covering of at most $n + 2k$.\n\nNow, assume there is a covering of the graph of $n + 2k$ or less (call this statement $G$). We know at least $n$ are covering the variables in order to cover the edges between negations. The $2k$ must be covering the triangles, 2 per triangle, due to the nature of the triangles. Now, we take the variables in our covering to be the true ones. The result must satisfy our problem, since each clause is satisfied by the construction of the triangles. So $G \\implies S$.\n\nThen the 3-SAT instance has a satisfying instance $\\iff$ the constructed graph has a vertex cover of size $\\le n + 2k$.\n\nQ6. Hamilton Path.\n\na. If you have a subroutine for Hamilton cycle, show you can use it to solve Hamilton path.\n\nWe take as input to Hamilton path the graph $G$. We then modify $G$ by adding one new vertex, $\\nu$, and connect it to every vertex in $G$. Call this $f(G)$. Then $G$ has a Hamilton path $\\iff f(G)$ has a Hamilton cycle.\n\nTo see this, note that we can view $f(G)$ in two \"planes\": one contains $\\nu$, and the other contains $G$. If there is a Hamilton cycle, we can start at $\\nu$, trace a path in $G$, and return to $\\nu$. But since our path in $G$ must touch every vertex, it is a Hamilton path. Thus $cycle(f(G)) \\implies path(G)$.\n\nFurther, if $G$ has a Hamilton path, then it is trivial to add a $\\nu$ and make it the start and end of a cycle in $f(G)$. So $path(G) \\implies cycle(f(G))$.\n\nb.  Modify the construction to solve vertex cover using Hamilton path.\n\nIf I've correctly understood the construction of the gadget and the graph, as well as properties of Hamilton cycles and paths, and what is being asked in the question, then:\n\nTrivially, with the given construction, a graph has a vertex cover $k \\iff$ the same construction as given has a Hamilton path, namely, that which starts at any vertex in the construction and finishes in the penultimate vertex of the guaranteed Hamilton cycle.\n\nFor a slightly more complex modification, we solve Hamilton cycle using Hamilton path, and use that construction.\n\nHamilton cycle can be solved by Hamilton path by adding to a graph $G$ a copy of some vertex $v$, called $v'$, whose incident edges are $\\{(v',u) : (v,u) \\in E\\}$. We then add two distinct nodes $a,b$ and the edges $(a,v), (b,v')$. This new graph $G'$ has a Hamilton path $\\iff G$ has a Hamilton cycle. The path will start and end with $a,b$ if it exists. The path solves Hamilton cycle since any path must travel through $v$ and $v'$ exactly once, in addition to all other vertices. But since $v$ and $v'$ are (practically) equivalent, ignoring the edges to $a,b$, we can use the ordering of edges in the path to generate a cycle! If the path is $(a,v), (v,u), (u,x), \\dots, (y,w), (w,v'), (v'b)$, then the cycle is $(v,u), (u,x), \\dots, (y,w), (w,v)$.\n\nSo, to solve vertex cover with Hamilton path, we simply take the \"gadgeted\" graph from the original construction, add this new copy-vertex $v'$ and the two vertex-edge pairs corresponding to $a$ and $b$: the resultant graph has a Hamilton path $\\iff$ the originally constructed graph has a Hamilton cycle $\\iff$ the original graph has a vertex cover of size $k$."
    }
  ]
}