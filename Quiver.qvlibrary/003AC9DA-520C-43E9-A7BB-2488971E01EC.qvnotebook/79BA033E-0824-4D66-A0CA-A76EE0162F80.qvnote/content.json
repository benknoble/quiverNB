{
  "title": "Homework 3",
  "cells": [
    {
      "type": "latex",
      "language": "latex",
      "data": "Q1. $T(n) = 3T(\\lfloor \\frac{n}{2} \\rfloor) + n$\n\nFrom the recursion tree, we find that the tree structure dominates the the cost; that is, there are the expected $\\lg{n}$ levels, but each level costs more than the one below. We have the expected cost at $\\sum_{1 \\le i \\le \\lg{n}}{c_i \\cdot i}$ for all $c_i \\ge 2$.\n\nWhile I was unable to use this to come up with a strong guess (other than perhaps $n^{\\lg{n}}$), the master theorem does tell us that $T(n) \\in \\Theta(n^{\\lg{3}})$, so I will use that and the substitution method. From the proof below, it is evident $n^{\\lg{n}}$ would have worked as well, despite being less tight.\n\nIgnoring floors:\n\nSo, we wish to prove $\\exists c \\gt 0, d : \\forall n \\gt 0 : T(n) \\le cn^{\\lg{3}} + dn$ by induction on $n$. The base case $T(1) = 1 \\le c + d$ holds if $c + d \\ge 1$.\n\nAssume that $\\forall 1 \\lt k \\lt n : T(k) \\le ck^{\\lg{3}} + dk$.\nThen $T(n) = 3T(\\frac{n}{2}) + n \\le 3(c\\left({\\frac{n}{2}}\\right)^{\\lg{3}} + \\frac{dn}{2}) + n$ by the induction hypothesis (since $0 \\lt \\frac{n}{2} \\lt n$).\nSo $T(n) \\le \\frac{3cn^{\\lg{3}}}{2^{\\lg{3}}} + \\frac{3dn}{2} + n$\n$= cn^{\\lg{3}} + dn + n\\frac{d+2}{2}$\n$\\le cn^{\\lg{3}} + dn$ when $\\frac{d+2}{2} \\le 0$, or $d \\le -2$.\n\nThen choose $d=-2, c=3$.\n\n$T(n) \\le 3n^{\\lg{3}} - 2n \\in O(n^{\\lg{3}})$\n\nQ2. $T(n) = T(\\frac{n}{2}) + n^2$\n\nFrom the recursion tree, we have the sum $\\sum_{1 \\le i \\le \\lg{n}}{(n + \\frac{n^2}{2^i})} \\in O(n^2)$ if we unroll (we have something like $n\\lg{n}$ and $n^2\\sum_{1 \\le i \\le \\lg{n}}{\\frac{1}{2^i}} = n^2 (2 - \\frac{2}{n}$).\n\nSo we will prove $\\exists c \\gt 0 : \\forall n \\gt 0 : T(n) \\le cn^2$ by induction on $n$. \nThe base case gives $T(1) = 1 \\le c$, which holds for $c \\ge 1$.\n\nAssume that $\\forall 1 \\lt k \\lt n : T(k) \\le ck^2$.\nThen $T(n) = T(\\frac{n}{2}) + n^2 \\le \\frac{cn^2}{4} + n^2$ by the induction hypothesis (since $0 \\lt \\frac{n}{2} \\lt n$).\nThen $T(n) \\le n^2 \\left( \\frac{c}{4} + 1 \\right) \\le cn^2$ when $c \\ge \\frac{4}{3}$.\n\nSo choose $c = \\frac{4}{3}$. Then $T(n) \\le \\frac{4}{3}n^2 \\in O(n^2)$.\n\nQ3. $T(n) = T(n-a) + T(a) + cn, a \\ge 1, c \\gt 0$. $T[1...a] = 1$.\n\nFrom the recursion tree we have the sum $\\sum_{0 \\le i \\le e}{1 + c(n-ia)}$ where $e$ is defined such that $0 \\lt n - ea \\le a$; that is, $e \\ge \\frac{n}{a} - 1$. Expansion gives us something like the (unsimplified) $\\frac{n}{a} + c\\left[\\frac{n^2}{a} - n + \\frac{n}{a} - 1 - a \\left(\\frac{\\frac{n}{a}\\left(\\frac{n}{a} + 1\\right)}{2}\\right)\\right]$. The mess clearly looks to be on the order of $n^2$ (really, $cn^2$). So we shall guess $T(n) \\le c'n^2 + dn + e$.\n\nWe will prove $\\exists c' \\gt 0, d,e : \\forall n \\gt 0 : T(n) \\le c'n^2 + dn + e$ by induction on $n$.\nThe base cases give $\\forall 1 \\le i \\le a : T(i) = 1 \\le c'i^2 + di + e$;\n    taking $i = 1$ gives $c' + d + e \\ge 1$.\n    \nAssume that $\\forall a \\lt k \\lt n : T(k) \\le c'k^2 + dk + e$.\nThen $T(n) = T(n-a) + T(a) + cn \\le c'(n-a)^2 + d(n-a) + e + 1 + cn$ by the induction hypothesis ($0 \\lt n-a \\lt n$) and the base case $T(a) = 1$.\nFurther, $c'(n-a)^2 + d(n-a) + e + 1 + cn$\n$= c'n^2 + dn + e - 2ac'n + cn - ad + 1 + c'a^2$\n$= c'n^2 + dn + e + n(c-2ac') + c'a^2 - ad + 1$\n$\\le c'n^2 + dn + e$ when $c-2ac' \\le 0, (c'a^2 - ad + 1) \\le 0$.\n\nChoose $c' \\ge \\frac{c}{2a}$. Then we have that $c'a^2 - ad + 1 \\le 0$, or $d \\ge \\frac{1+c'a^2}{a} = \\frac{1+\\frac{ca}{2}}{a} = \\frac{2+ca}{2a}$.\nFinally, $c' + d + e \\ge \\frac{c}{2a} + \\frac{2+ca}{2a} + e = \\frac{2+c(a+1)}{2a} + e \\ge 1 \\implies e \\ge 1 - \\frac{2+c(a+1)}{2a}$.\n\nWe can then conclude $T(n) \\le c'n^2 + dn + e \\in O(n^2)$.\n\nI attempted to follow other, simpler proofs, such as e.g. https://ita.skanev.com/04/04/08.html, but there seemed to be errors in the algebra (check for the term $ca^2$... it disappears without a trace). This was the best I could work through using induction; the proof is clearly much simpler if we roll out the terms and collect.\n\nQ4. $T(n) = T(\\alpha n) + T((1-\\alpha)n) + cn, \\alpha \\in (0,1), c \\gt 0$\n\nAssume wlog $\\alpha \\le \\frac{1}{2}$\nFrom the recursion tree, we have approximately $\\log_\\alpha n$ levels of cost $cn$ each. So we guess $T(n) \\le dn\\log_\\alpha n + en$.\n\nWe will prove $\\exists d \\gt 0 : \\forall n \\gt 0 : T(n) \\le dn\\log_\\alpha{n} + en$ by induction on $n$.\nFrom the base cases provided, $T(1) = 1 \\le e$. Any other case (e.g. $\\frac{1}{\\alpha}$) would give a weaker constraint.\n\nAssume $\\forall \\max(\\frac{1}{\\alpha}, \\frac{1}{1-\\alpha}) \\lt k \\lt n : T(k) \\le dk\\log_\\alpha{k} + ek$\nThen $T(n) = T(\\alpha n) + T((1-\\alpha)n) + cn \\le dn\\alpha\\log_\\alpha{n\\alpha} + en\\alpha + dn(1-\\alpha)\\log_\\alpha{n(1-\\alpha)} + en(1-\\alpha) + cn$ by the induction hypothesis, since both $\\alpha n$ and $(1-\\alpha)n$ are less than $n$.\nFurther, $dn\\alpha\\log_\\alpha{n\\alpha} + en\\alpha + dn(1-\\alpha)\\log_\\alpha{n(1-\\alpha)} + en(1-\\alpha) + cn$\n$= dn\\alpha(\\log_\\alpha{n} + \\log_\\alpha{\\alpha}) + en + dn(1-\\alpha)(\\log_\\alpha{n} + \\log_\\alpha{(1-\\alpha)}) + cn$\n$= en + dn(\\log_\\alpha{n} + \\log_\\alpha{(1-\\alpha)}) - dn\\alpha\\log_\\alpha{(1-\\alpha)} + dn\\alpha + cn$\n$= dn\\log_\\alpha{n} + en + dn\\log_\\alpha{(1-\\alpha)} - dn\\alpha\\log_\\alpha{(1-\\alpha)} + dn\\alpha + cn$\n$= dn\\log_\\alpha{n} + en + n(d(1-\\alpha)\\log_\\alpha{(1-\\alpha)} + d\\alpha + c)$\n$\\le dn\\log_\\alpha{n} + en$ if $(d(1-\\alpha)\\log_\\alpha{(1-\\alpha)} + d\\alpha + c) \\le 0$.\n$d(1-\\alpha)\\log_\\alpha{(1-\\alpha)} + d\\alpha + c$\n$= d(\\alpha + (1-\\alpha)\\log_\\alpha{(1-\\alpha)}) + c$\nNote that $1-\\alpha \\ge \\alpha$, so $\\log_\\alpha{(1-\\alpha)} \\ge 1$.\nSo the quantity is less than or equal to $0$ if $d \\le \\frac{-c}{\\alpha + (1-\\alpha)\\log_\\alpha{(1-\\alpha)}}$\n\nChoose $d$ equal to this quantity, and $e=1$. Then $T(n) \\le \\frac{-c}{\\alpha + (1-\\alpha)\\log_\\alpha{(1-\\alpha)}}\\log_\\alpha{n} + n \\in O(n\\lg{n})$"
    }
  ]
}