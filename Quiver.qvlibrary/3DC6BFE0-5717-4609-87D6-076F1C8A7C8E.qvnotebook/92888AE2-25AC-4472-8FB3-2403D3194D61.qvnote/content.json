{
  "title": "30 August // Lecture 4",
  "cells": [
    {
      "type": "latex",
      "language": "latex",
      "data": "Deterministic Finite Automata\n\n$M = (Q, \\Sigma, \\delta : Q \\times \\Sigma \\to Q, q_0 \\in Q, F \\subseteq Q)$\n$Q$ a set of states\n$\\Sigma$ an alphabet\n$\\delta$ the transition function\n$q_0$ the initial state\n$F$ the final \"accepting\" states\n\nA configuration $C$ of $M$ is an element of $K \\times \\Sigma^*$\n$C \\vdash_M C'$ means $C$ yields $C'$ in one step.\n$\\vdash_M^*$ is the reflexive transitive closure of $\\vdash_M$\n$C \\vdash_M^* C'$ means $C$ yields $C'$\n\n$w \\in \\Sigma^*$ is accepted by $M$ if $\\exists q \\in F : (s,w) \\vdash_M^* (q,\\epsilon)$\n\nFinally, $L(M)$ is the language recognized by $M$, defined as the set of all strings that are accepted.\n\nConstruction:\n1. Divide all strings in $\\Sigma$ into a finite number of equivalent subsets (such as binary strings with even numbers of zeroes and those with odd numbers of zeroes).\n2. Choose a state for each subset.\n3. Determine the transitions between states (subsets)\n4. Start is the subset containing the empty string\n5. Accepting states are those also in $L$\n\nExample: give a DFA that accepts strings containing even numbers of zeroes and an even number of ones.\n1. Four states: $E_0E_1, O_0E_1, E_0O_1, O_0O_1 $ that partition $\\Sigma = \\{ 0, 1 \\}$ on even/odd number of zeroes and ones\n2. The transitions are\n$\\delta(E_0E_1, 1) = E_0O_1$,\n$\\delta(E_0E_1, 0) = O_0E_1$,\n&c.\n4. Start is $E_0E_1$\n5. Accept only $E_0E_1$\n\nNon-DFA (NFA)\n\n$M = (Q, \\Sigma, \\Delta \\subseteq Q \\times \\Sigma \\times Q, q_0 \\in Q, F \\subseteq Q)$\n$\\Delta$ is a relation here (often one-to-many)\n$\\Delta$ sometimes is defined as $\\Delta \\subseteq Q \\times (\\Sigma \\cup \\{ \\epsilon \\}) \\times Q$\nThis gives the NFA-$\\epsilon$, which can be shown equivalent to NFA. We have $q \\in Q : E(q)$ is the set of all states reachable from $q$ by following an empty-string transition. $E(q) = \\{ p \\in Q : (q,\\epsilon) \\vdash_M^* (p,\\epsilon) \\}$\n\nDFA are specialized (more restrictive) NFA; further, a DFA can be constructed to be equivalent to any NFA using a powerset construction. Thus the set of all DFA is equivalent to the set of all NFA."
    }
  ]
}