{
  "title": "28 August // Lecture 3",
  "cells": [
    {
      "type": "latex",
      "language": "latex",
      "data": "Finite Representations of Languages\n\nWe have at least for ways to do this:\n1. Generators\n2. Acceptors (mathematical predicate)\n3. Descriptions (e.g. $\\{ a^nb^n : n \\ge 0 \\}$\n4. Explicit listings, like $\\{ 0, 1, 00, 01 \\}$\n\n(4) only works for finite languages.\n(3) is very general, but membership testing is hard\n(2) struggles with certain questions (e.g. whether or not the language is empty)\n(1) can determine if a language is empty, but it struggles to determine membership\n\nOver an alphabet $\\Sigma$ there are uncountably many languages, and only countably many representations in finite set of symbols.\n\nRegular Expressions\n\nLet $reg_\\Sigma(a)$ be the statement that $a$ is a regular expression over alphabet $\\Sigma$\n\n1. $a \\in \\Sigma \\implies reg_\\Sigma(a)$\n2. $reg_\\Sigma(\\emptyset)$\n3. $reg_\\Sigma(E) \\land reg_\\Sigma(F) \\implies reg_\\Sigma(EF) \\land reg_\\Sigma(E \\cup F)$\n4. $reg_\\Sigma(E) \\implies reg_\\Sigma(E^*)$\n\nThese rules of inference allow us to prove $reg_\\Sigma(10^* \\cup 01^*)$ for $\\Sigma = \\{ 0, 1 \\}$\n\nRepresentation\n\n$reg_\\Sigma(E) \\implies \\mathcal{L}(E)$ is the (regular) language it represents\n\n1. $a \\in \\Sigma \\implies \\mathcal{L}(a) = \\{ a \\}$\n2. $\\mathcal{L}(\\emptyset) = \\emptyset$\n4. $\\mathcal{L}(EF) = \\mathcal{L}(E) \\circ \\mathcal{L}(F)$\n5. $\\mathcal{L}(E \\cup F) = \\mathcal{L}(E) \\cup \\mathcal{L}(F)$\n6. $\\mathcal{L}(E^*) = \\mathcal{L}(E)^*$\n\nRegular Languages\n\nA language is said to be regular if there is a regular expression representing it.\nQuestions: Combinations of regular languages? Which are regular? Finding a regular expression for a set $S$ of strings?\n\nEquations Between Languages\n\nFacts:\n$\\{a,b\\}^* \\neq \\{a\\}^* \\{b\\}^*$\n$\\{a\\}^* \\{b\\}^* \\neq \\{a\\}^* \\cup \\{b\\}^*$\n$\\mathcal{L}(\\emptyset^*) = \\{ \\epsilon \\}$\n$\\mathcal{L}(E) = \\mathcal{L}(F) \\implies E = F$\n\nFacts:\n$ab\\emptyset = \\emptyset$\n$ab(\\emptyset^*) = ab$\n\nProblems\n\nGive a regex for the set of even length binary strings ?\nThe language would be $L = \\{ 00, 01, 10, 11 \\}^*$...\nSo the expression is $((00) \\cup (01) \\cup (10) \\cup (11))^* = ((0 \\cup 1)(0 \\cup 1))^*$\n\nWhat language is represented by the regex $(a^*ab) \\cup b$ ? Can we simplify it ?\nThe language is the set of all strings containing some number of $a$s, followed by $ab$, or just $b$.\nA simpler regex is $a^*b$.\n\nRegex for set of strings in $\\{ a, b \\}^*$ with exactly one $a$ ?\n$b^*ab^*$\n\nRegex for set of strings in $\\{ a, b, c \\}^*$ with exactly one $a$ or one $b$ ?\n$c^*(a \\cup b)c^*$\n\nRegex for floating point numbers (e.g. $0.326E+5$) ?\nLet $D$ be the set of digits $0-9$\n$(+ \\cup -)(\\bigcup{D})^*\\bigcup{D}((.(\\bigcup{D})^*) \\cup \\epsilon)E(+ \\cup -)((\\bigcup{D})^* \\cup 1)$\nIf we allow $D^*$, then: $(+ \\cup -)D^*D(.D^*D \\cup \\epsilon)E(+ \\cup -)D^*D$\nIf we allow $D^+$, then: $(+ \\cup -)D^+(.D^+ \\cup \\epsilon)E(+ \\cup -)D^+$\n\nRegexes can be used in many programming languages to do text searching (not the same as an entire string being in $\\mathcal{L}(E)$)\n\nFinite Automata: To Be Continued"
    }
  ]
}