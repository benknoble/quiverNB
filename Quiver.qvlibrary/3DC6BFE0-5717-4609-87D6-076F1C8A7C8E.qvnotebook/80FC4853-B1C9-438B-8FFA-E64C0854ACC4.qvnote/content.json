{
  "title": "Homework 6",
  "cells": [
    {
      "type": "latex",
      "language": "latex",
      "data": "1. Show that the grammar is ambiguous, and give an equivalent unambiguous grammar.\n\nGrammar:\n\\begin{align}\n    S &\\to AU \\\\\n    S &\\to VC \\\\\n    U &\\to BC \\\\\n    V &\\to AB \\\\\n    A &\\to a \\\\\n    A &\\to f \\\\\n    B &\\to b \\\\\n    C &\\to c \\\\\n    C &\\to g\n\\end{align}\n\nThe grammar is unambiguous because more than one parse tree exists for the string $abc$:\n\n\\[\n\\verb|     S   | \\\\\n\\verb|     ^   | \\\\\n\\verb|  V   \\  | \\\\\n\\verb|  ^     !| \\\\\n\\verb|A   B   C| \\\\\n\\verb|!   !   !| \\\\\n\\verb|a   b   c| \\\\\n\\verb| | \\\\ \n\\verb|    S    | \\\\\n\\verb|    ^    | \\\\\n\\verb| /    U  | \\\\\n\\verb|!     ^  | \\\\\n\\verb|A   B   C| \\\\\n\\verb|!   !   !| \\\\\n\\verb|a   b   c| \\\\\n\\]\n\nFor an equivalent grammar, we notice that $S$ always goes to $ABC$, so we write:\n\\begin{align}\n    S &\\to ABC \\\\\n    A &\\to a \\\\\n    A &\\to f \\\\\n    B &\\to b \\\\\n    C &\\to c \\\\\n    C &\\to g\n\\end{align}\n\n2. The string is $id * (id + id) + id$\n\n\\[\n\\verb|E| \\\\\n\\verb|^| \\\\\n\\verb|E + T| \\\\\n\\verb|!      !| \\\\\n\\verb|T      F| \\\\\n\\verb|^       \\| \\\\\n\\verb|T * F    id| \\\\\n\\verb|!    ^        | \\\\\n\\verb|F   (E)      | \\\\\n\\verb|!       \\       | \\\\\n\\verb|id   (E + T)| \\\\\n\\verb|        !     ! | \\\\\n\\verb|        T + F| \\\\\n\\verb|         !      \\ | \\\\\n\\verb|            F +  id| \\\\\n\\verb|         !        | \\\\\n\\verb|       id     | \\\\\n\\]\n\n3. We consider the PDA as defined in problem 3.3.1. For the following proofs, I will consider only those paths in the PDA which end up in state $f$; any others cannot be accepted and are thus irrelevant to the discussion.\n\n(b) Show that $aba \\not\\in L(M)$: if the PDA transitions to $f$ at the first $a$, it finds it cannot pop any $a$s off the stack when it reads the remaining symbols (i.e., all subsequent transitions fail); if it instead transitions at the last $a$, the stack is non-empty and the state is non-accepting.\n\n$aa \\not\\in L(M)$: if the PDA transitions to $f$ at the first $a$, it cannot pop an $a$ of the stack for the remaining symbol; if instead it transitions to $f$ at the second, the stack is non-empty and the state is non-accepting.\n\n$abb \\not\\in L(M)$: the PDA must immediately transition to $f$ to reach $f$ (there are no subsequent $a$s to get us there); but now it finds that it cannot pop any $a$s off the stack: failure.\n\n$baa \\in L(M)$: Consider the following sequence of configurations:\n$(s,baa,e) \\vdash (s,aa,a) \\vdash (f,a,a) \\vdash (f,e,e) \\diamond$\n\n$bab \\in L(M)$: Consider the following sequence of configurations:\n$(s,bab,e) \\vdash (s,ab,a) \\vdash (f,b,a) \\vdash (f,e,e) \\diamond$\n\n$baaaa \\in L(M)$: Consider the following sequence of configurations:\n$(s,baaaa,e) \\vdash (s,aaaa,a) \\vdash (s,aaa,aa) \\vdash (f,aa,aa) \\vdash (f,a,a) \\vdash (f,e,e) \\diamond$\n\n(c) It is easy to see from the transitions in $M$ that the strings accepted by the automata (and thus in $L(M)$) are those in\n$$\\{ (a \\cup b)^n a (a \\cup b)^n\\}$$\nwhere $(a \\cup b)^n$ denotes any string $w \\in \\{a,b\\}^*$ of length $n$.\n\nThat is, $L(M)$ is all strings of a number of $a$s and $b$s, followed by an $a$, followed by the same number of $a$s and $b$s."
    }
  ]
}