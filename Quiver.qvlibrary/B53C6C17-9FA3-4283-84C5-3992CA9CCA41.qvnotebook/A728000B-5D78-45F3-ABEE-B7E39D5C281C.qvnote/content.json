{
  "title": "27 February // Lecture 13",
  "cells": [
    {
      "type": "markdown",
      "data": "Poll Everywhere\n\n> Q: See image: Consider this (min) binary heap. We do two successive \"delMin\" operations. Click on the node where element \"18\" ends up after the second delMin is complete.\n> A: Where the 11 starts\n\n> Q: We have an array of N integers. We wish to use a min binary heap to sort these integers into ascending order. True or False: Doing this operation will have a worst case time complexity described by $O(n^2)$.\n> A: Sort of either... $O(n^2)$ is not a *tight* bound, but it is a bound\n\n> Q: We have an array of N integers. We wish to use a min binary heap to sort these integers into ascending order. True or False: Doing this operation will have a worst case time complexity described by $O(n^2)$.\n> A: Simply a discussion question. At present, answer is irrelevant. Probably technically implementation dependent\n\nCan implement a PriorityQueue using iteration or recursion\nExamined heapishSort using Prof. Stotts' JS code\n\n#AVL: Balanced Binary Tree\nMerely one way of balancing trees\nBalancing is how we alleviate the degenerate cases to keep our trees fluffy and tree-like\nAVL *is* a binary search tree (and so is a splay tree)\nRepeated inserts or deletes can make the tree stretch out and become 'heavy' on one side\n\n###Balance\nWhat conditions can we use to impose balance?\n\n- Look at root... how about requiring each subtree to have near or near same height? Turns out to be weak\n- Try *every path*... still rather weak\n\nHere's what AVL uses: at every node $n$:\n- height $h_L$ of left subtree $L$ and height $h_R$ or right subtree $R$ differ by at most $1$\n\nSo, now we have to also keep track at each node of $h_L, h_R$ so that detected unbalances can be fixed\nRearrangement is called *rotation*\nRemember: height of `null` is $-1$\n\n###Rotation\nSingle rotation: Pivot becomes root, root moves down, and an old inner subtree changes it's parent\nSee ppt animation from wikipedia\nSeveral different cases\n\nEven though insert costs extra work, it's constant, and we haven't lost efficiency"
    }
  ]
}