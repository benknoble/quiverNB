{
  "title": "3 April // Lecture 19",
  "cells": [
    {
      "type": "markdown",
      "data": "PollEv\n\n> Q: In a directed graph with $n$ nodes, the maximum number of edges is (and so space needed for edges) is\n> A: $O(n^2)$ (actually $n(n-1)$ with is on the order ($O$) of $n^2$)\n\n> Q: True or False: In a directed graph with $n$ vertices, the longest possible path has length $n-1$\n> A: False. Cycles and repetitions can extend the path\n\n> Q: True or False: In a directed graph with $n$ vertices, if there is a node with no out-edges then there are no cycles\n> A: False. The cycle could exist around a different set of nodes exluding the non-out-edge node.\n\n> Q: The digraph shown is [image shown]\n> A: Acyclic and Weakly Connected\n\n> Q: True or False: if a digraph is bipartite then it is a tree\n> A: False: A tree is a bipartite graph, but the converse is not necessarily true \n\n## Graph Implementation/Modeling\n### Adjacency Matrix\n- easy to implement, not always efficient\nUnweighted:\n- Array of $n\\times n$ booleans for $n$ nodes\n- if `matrix[i][j] == true`, then $(i,j) \\in E$\n- clearly uses $n^2$ space for $n$ nodes\nWeighted: array of weights, use a $0$ or negative weight for no edge\n\nWastes a lot of space if the graph is **sparse**, but if it's dense, then we don't get much gain out of *not* using an adjacency matrix\n\nIf $|E| \\approx |V|^2$ then the graph is **dense**\nIf $|E| \\ll |V|^2$ then the graph is **sparse** and the graph is $O(|V|^2)$\n\nComplete graphs are dense\nFor sparse graphs, we do something different\n\n### Adjacency List\nKeep a list of vertices\nEach vertex has a list of adjacent vertices\n- List of lists\n- HashMap of lists\n- Array of lists\nLeads to an `Edge` class typically\n\nLinear for a graph is $O(V+E)$\n\n`HashMap` can help you get efficiency: don't have to scan linearly through a list to get to a particular node"
    }
  ]
}