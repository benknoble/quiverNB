{
  "title": "Isabel & Website Building",
  "cells": [
    {
      "type": "markdown",
      "data": "Hey Isabel,\n\nThis is a little write-up of some things that I know about that you could look into and play with to get up and running.\n\nI'm going to try to give gentle and broad introductions to some concepts, and then link you to some external resources that would be good launching points.\n\n# Outline\n\n1. The Internet\n1. Website Trinity\n    1. HTML\n    1. CSS\n    1. Javascript\n1. Building a site\n    1. Wordpress\n    1. Dreamweaver\n    1. Jekyll (Hyde)\n\n## The Internet\n\nThe internet consists of a jumble of protocols for information exchange, none of which are truly relevant to you.\n\nWhat is important is the way browsers render that data: effectively, they are converting received data into a human readable form. We'll get to what the initial data looks like in a minute.\n\nThe other relevant thing to know is that data has to come from _somewhere_. When you type `google.com` into your browser, there's a collection of _servers_ (basically just computers) that know how to find another computer that contains all the information necessary to show the website.\n\nThere are [lots of _hosting providers_](https://www.google.com/search?q=hosting+providers) which will give you a server on which you can place your \"data\"--this allows you to actually have a site on the internet! However, it typically has an address like `83.23.90.64` or some other string of digits. This is the _IP address_ of the computer. In order to have a fancy url, you need to [purchase a _domain_](https://www.google.com/search?q=domain+names), or use a provider which provides you with a domain. We'll talk more about your options for some of the technology I'll mention.\n\n## Website Trinity\n\nThere are 3 \"chunks\" of data that make up a typical _static_ website. \"Static\" here means that the pages are rendered from a set of files that doesn't change (except when you update them). This doesn't mean the content is static and doesn't move (you _can_ do animations, embed videos, &c.). It contrasts with so called _dynmaic_ sites, where the data on the server is changing rapidly--there might be a database of shopping info behind Amazon.com, for example, that changes as customers purchase items and retailers decide to sell them. This typically involves writing a lot more nitty-gritty code and is a whole career path. I'm going to ignore it for the remainder of this mini essay.\n\nSo, the three chunks of data: it boils down to\n\n1. content,\n2. style,\n3. and scripts.\n\nThat third category is very loose and I probably won't spend too much time on it.\n\n### HTML (Content)\n\nHTML is a markup language that defines what goes on a web page. It doesn't say how it has to look; that's what the styling is for. It just gives semantic value to chunks of text: this is a link, that is a paragraph, and that thing is a list.\n\nWhile I could dive in and try to explain to you what HTML looks like, I think it's better if I point you at one [one of the 100s of tutorials that exist](https://www.w3schools.com/html/) (W3 schools has quite a lot of good reference information as well; I use them frequently to look things up).\n\nThe cool part about HTML is that you can write a file, save it as a `.html` file, and open it in, say, Safari on your local computer to see how it looks! I've included the HTML version of this file so you can look at an example, play with it, and see how to open it in Safari. You can open it with TextEdit or any other plain-text editor to see the actual code.\n\n> I didn't write the HTML by hand, because I'm not insane, so it might have some weird cruft in it. Sorry.\n\n### CSS (Style)\n\n_CSS_ stands for \"Cascading Style Sheets.\" All that means is it lets you tell your HTML documents that paragraphs should use this font and be centered and have a blue background, while lists should use this cool icon, &c.\n\nIt has it's own special syntax and rules and functions, and again I'll just direct you to a [W3 tutorial](https://www.w3schools.com/css/).\n\nOnce you write a `.css` file, you tell your HTML pages to include it as a resource so that it gets applied.\n\nIf you like design, this is the fun part of that. This is how you make really boring text on a page readable. It can also help you build navigation bars that look interesting, and do all sorts of other cool things.\n\n### Javascript (Scripts)\n\nThis is a completely separate language from Java, so don't mix the two up. Javascript is the de facto way of adding \"dynamic\" content to static websites--here \"dynamic\" means things like performing an action on the click of a button, or animating a paragraph, or any number of other things.\n\nLike a `.css` file, you can write `.js` files and then attach them as resources to your HTML.\n\nHere's a [W3 tutorial](https://www.w3schools.com/js) if you need it.\n\n## Building the site\n\nI'm going to present 3 options, roughly in order of complexity, but also in order of how well I know them. There are about $\\approx 1000$ others (give or take a few orders of magnitude), so you might remember things like Wix or Weebly. While they can work for really fast building (and they give you domain names under their site), if you want more flexibility I'd recommend something more powerful.\n\nI'll try to discuss hosting options along the way.\n\n### Wordpress\n\nMost people have heard of [Wordpress](https://wordpress.com) at this point; they provide hosting, a domain like `mywebsite.wordpress.com`, and a [lot of popular sites](https://colorlib.com/wp/blogs-using-wordpress/) have been built using just its tools. I know practically nothing about it, or how it works, but they do have a large user base that can help you out. They even have a free plan.\n\nGoogling [\"wordpress tutorial\"](https://www.google.com/search?q=wordpress+tutorial) got me some relevant results, such as [`https://learn.wordpress.com/`](https://learn.wordpress.com/).\n\n### Dreamweaver\n\nThis is an [Adobe Product](https://www.adobe.com/products/dreamweaver.html?gclid=CjwKCAiAodTfBRBEEiwAa1hauoAcnOQCaA87sEmX-TfUYL-weyP8yPychB2OtDsZjWicdaCpAMHD1RoCHtkQAvD_BwE&sdid=KKQTJ&mv=search&ef_id=CjwKCAiAodTfBRBEEiwAa1hauoAcnOQCaA87sEmX-TfUYL-weyP8yPychB2OtDsZjWicdaCpAMHD1RoCHtkQAvD_BwE:G:s&s_kwcid=AL!3085!3!301436940689!e!!g!!dreamweaver) that we have access to through the Creative Cloud program with UNC. I played with it once a long time ago, but it's a pretty full-featured \"development environment\" for making websites; you can edit HTML and CSS, get help with tags and properties, see a rendered version, run the site live, &c.\n\nThey've got a [series of tutorials](https://helpx.adobe.com/dreamweaver/tutorials.html?promoid=3X72B3ZP&mv=other) as well. My Dad has built sites with them before, and I think they natively support a hosting service called Dreamhost that is free for non-profits.\n\nIf you are willing to write a little more code (HTML & CSS) than for something like Wordpress, this could be a good starting point.\n\n### Jekyll (and Hyde)\n\n[`Jekyll`](https://jekyllrb.com) has been described as the programmer's website-tool; it provides a framework for writing HTML, CSS, and also [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) (a neat little [markup language](https://daringfireball.net/projects/markdown/); I can send you the markdown version of this document if you want it), combining data and layouts via templates, and even writing code to generate the finished product.\n\nEssentially, you put together a set of files in a particular layout, and `jekyll` creates the entire static site for you.\n\nThis is the most \"code-heavy\" option, though it works fine with just basic HTML and CSS. A possibly barrier to entry would be that it does encourage use of some command line tools, and the free hosting that it supports is through GitHub Pages, a service of [GitHub](https://github.com). GitHub is an awesome platform, but to really use it requires an intro to [`git`](https://git-scm.com/book/en/v2). If you've got a lot of time and want to invest in being able to really tweak and customize your site, this is a good option. Otherwise, I'd stick with something a little simpler.\n\nMy [blog](https://benknoble.github.io) is built on Jekyll--you can find the [source over on GitHub](https://github.com/benknoble/benknoble.github.io).\n\nI've never used [Hyde](http://hyde.github.io), but it does something similar.\n\n## Conclusion\n\nThis a very brief, very narrow overview of the world of static sites. There's a lot more to learn--in particular, I recommend some of the linked tutorials, googling around, and just trying some things out on your own.\n\nIf you're really itching to have a finished product, Wordpress is supposed to be easy and fast. But if you want to spend some time on it, really making it your own, I would consider investing in learning something more powerful. There are a _lot_ of options, and you'll need to find the best one that works for you.\n\nAlso, don't forget you can ask the Internet, me, or the App Lab questions!"
    }
  ]
}